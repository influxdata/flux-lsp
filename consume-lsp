#!/bin/bash

# This script is meant to be run after the Flux release script has
# opened a PR in the LSP, and that PR has merged.

# It should handle the rest of the release process, with minimal 
# babysitting by an engineer.

# If any command fails, exit the script
set -e

# Check if hub is installed
if ! command -v hub &> /dev/null
then
    echo "hub is not installed. exiting"
fi

# Make a temporary directory where we can clone fresh copies of all the necessary repos
TEMPDIR=$(mktemp -d -t lsp-release.XXXX)
echo "Using ${TEMPDIR}"
cd $TEMPDIR

# Cut down on code duplication
function tmp_clone() {
	git clone git@github.com:influxdata/$1.git &> /dev/null
	echo "$(pwd)/$1"
}

function extract_version() {
	v=$(echo "$1" | grep -Po -m 1 '\d+\.\d+\.\d+')
	echo $v
}

FLUX_DIR=$(tmp_clone flux)
LSP_DIR=$(tmp_clone flux-lsp)
VSFLUX_DIR=$(tmp_clone vsflux)
CLI_DIR=$(tmp_clone flux-lsp-cli)
INFLUXDB_DIR=$(tmp_clone influxdb)

# ui is a private repo, so maybe we should treat it like idpe,
# in the sense that we don't want to expose its existence to the public.
UI_DIR=$(tmp_clone ui)

cd $FLUX_DIR
flux_version=$(extract_version $(git describe))

# TODO:
# (maybe?) Confirm that the flux version matches what's in flux-lsp's Cargo.toml

# Tag a release of the LSP
cd $LSP_DIR
lsp_version=$(extract_version "$(cat Cargo.toml)")
echo $lsp_version
make tag-release

# Wait for the release to hit NPM registry
while true; do
	echo "Waiting for LSP release to finish publishing to NPM..."
	npm_node_version=$(extract_version "$(npm search @influxdata/flux-lsp-node)")
	npm_browser_version=$(extract_version "$(npm search @influxdata/flux-lsp-browser)")
	[[ $npm_node_version == $lsp_version ]] && [[ $npm_browser_version == $lsp_version ]] && break
	sleep 30
done

branch_name="build/lsp-$lsp_version"

function ui_pr() {
	git checkout -b $branch_name
	yarn add @influxdata/flux-lsp-browser
	git add package.json
	git commit -m "build(lsp): Upgrade flux-lsp-browser to v$lsp_version"
	git push -u origin $branch_name

	hub pull-request -o \
		-m "build(lsp): Upgrade to flux-lsp-browser v$lsp_version" \
		-m "Upgrade flux-lsp-browser to [v$lsp_version](https://github.com/influxdata/flux-lsp/releases/tag/$lsp_version)" &> /dev/null &
}

# Open PRs into all of the LSP consumers
cd $VSFLUX_DIR
make patch-version

cd $CLI_DIR
make patch-version

cd $INFLUXDB_DIR/ui
ui_pr

cd $UI_DIR
ui_pr

# Pause and wait for the vsflux and cli PRs to merge. Continue when user gives the go-ahead.
echo "Wait for the vsflux and flux-lsp-cli PRs to merge."
echo "Type 'release' to continue. Doing so will tag releases for both repos."
while [ true ] ; do
	read -t 10000 -n 7 input
	if [[ $input == "release" ]] ; then
		echo ""
		break
	else
		echo ""
		echo "try again"
		continue
	fi
done

echo "Tagging releases..."

# Tag releases for vsflux and cli
cd $VSFLUX_DIR
make tag-release

cd $CLI_DIR
make tag-release

# Clean up
rm -rf $TEMPDIR
